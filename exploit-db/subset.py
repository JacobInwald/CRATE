#!/bin/python3

import pandas as pd
import requests 
import numpy as np
import ast
from bs4 import BeautifulSoup

# Define a converter function that converts string representation of a list back to a list
def parse_list(x):
    return ast.literal_eval(x)

def get_cwe_from_cve(cve_id):
    """
    Query the NVD API for the given CVE identifier and return its CWE.

    Parameters:
        cve_id (str): The CVE identifier (e.g., 'CVE-2020-12345').

    Returns:
        str: The CWE value (e.g., 'CWE-79') if found, otherwise an error message.
    """
    # Build the URL for the NVD API. You can add an API key as a parameter if required.
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json().get('vulnerabilities', [{}])[0]

        cve_items = data.get('cve', {})

        cwes = cve_items.get('weaknesses', {})
        cwes_str = [
            cwe.get('description', [{}])[0].get('value', '')    
            for cwe in cwes
            ] 
         
        return list(set(cwes_str))
    
    except requests.exceptions.RequestException as e:
        return f"Request error: {e}"
    except Exception as e:
        return f"Error parsing response: {e}"



def get_cwe_name(cwe_id):
    """
    Given a CWE identifier (e.g., 'CWE-89'), fetches the corresponding CWE name.
    """
    try:
        # Extract the numeric portion from the CWE identifier
        numeric_id = cwe_id.split('-')[-1]
        # Build the URL for the CWE definition page (e.g., https://cwe.mitre.org/data/definitions/89.html)
        url = f"https://cwe.mitre.org/data/definitions/{numeric_id}.html"
        response = requests.get(url)
        response.raise_for_status()  # Raise an error if the page isn't fetched correctly

        # Parse the HTML content
        soup = BeautifulSoup(response.text, 'html.parser')

        # The CWE name is typically found within an <h2> tag on the page.
        header = soup.find('h2')
        if header:
            # Remove the CWE id from the header text (e.g., "CWE-89: Improper Neutralization of Special Elements used in an SQL Command")
            header_text = header.get_text().strip()
            if ':' in header_text:
                _, name = header_text.split(':', 1)
                return name.strip()
            else:
                return "" 
        else:
            return ""
    except Exception as e:
        return ""


df = pd.read_csv('tagged_subset.csv', converters={'CWE': parse_list})
df = df[df['kernel']==0]
# Search for CWE
unique_cwes = list(set([b for a in df['CWE'].tolist() for b in a]))
cwes = {k: 0 for k in unique_cwes}
cwes['NA'] = 0
for _ in [None for _ in df['CWE'].tolist() if len(_) == 0]:
    cwes['NA'] += 1

cwe_cat = {
        "Memory Error": ["CWE-787","CWE-416","CWE-119","CWE-125","CWE-122","CWE-190", "CWE-681", "CWE-665"], 
        "Input Validation": ["CWE-200", "CWE-78", "CWE-88", "CWE-94", "CWE-20"], 
        "Race Condition": ["CWE-367", "CWE-362"],
        "Permission Error": ["CWE-863", "CWE-269"],
        "Other": ["CWE-209","CWE-829","CWE-732","CWE-59","CWE-754","CWE-61","CWE-203","CWE-1303", "CWE-755"], 
        "Uncategorised": ['NA']
        }

for idx, row in df.iterrows():
    for cwe in row['CWE']:
        cwes[cwe] += 1



cwes = sorted(cwes.items(), key=lambda item: item[1], reverse=True)
_cwes = {k: 0 for k in cwe_cat.keys()}
for k, v in cwes:
    added = False 
    for _k, _v in cwe_cat.items():
        if k in _v: 
            _cwes[_k] += v
            added = True 
    if not added:       
        print("----------------------------------")
        print(k + ":    " +  get_cwe_name(k))
        print("Count: ", v)


print(_cwes)
